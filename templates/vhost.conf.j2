<VirtualHost *:{{ apache_http_port }}>

  ServerName {{ item.server_name }}
{% if item.aliases is defined %}
  ServerAlias {% for alias in item.aliases %}{{ alias }} {% endfor %}
{% endif %}

  UseCanonicalName on
  DocumentRoot {{ item.document_root }}{% if item.folder is defined %}/{{ item.folder }}{% endif %}


  <Directory {{ item.document_root }}{% if item.folder is defined %}/{{ item.folder }}{% endif %}>
    Options +FollowSymLinks -Indexes
    DirectoryIndex index.html index.htm
{% if item.fcgi == true %}
    AllowOverride All
{%   else %}
    AllowOverride None
{% endif %}

{% if item.auth is defined %}
{%   if item.auth.htaccess is defined %}
    AuthName "Restricted"
    AuthType Basic
    AuthUserFile /etc/htpasswd/{{ item.auth.htaccess.name}}
    Require valid-user
{%   endif %}
{%   if item.auth.ip is defined and item.auth.ip.forwarded is defined %}
{%   for ip in item.auth.ip.forwarded %}
    SetEnvIf X-Forwarded-For "{{ ip.ip }}" {{ ip.name }}
    Require env {{ ip.name }}
{%   endfor %}
{%   endif %}
{%   if item.auth.ip is defined and item.auth.ip.direct is defined %}
    Require ip {{ item.auth.ip.direct }}
{%   endif %}
    Deny from all
    Satisfy Any
{% else %}
    Require all granted
{% endif %}
  </Directory>

{% if item.auth is defined %}
  <LocationMatch ^/(\?q=)?user(/?.*)$ >

    AuthName "Restricted"
    AuthType Basic
    AuthUserFile /etc/htpasswd/{{ item.auth.htaccess.name }}
    Require valid-user

# Allows access to /user only through SSL
    Require expr %{HTTP:X-Forwarded-Proto} == 'https'

  </LocationMatch>
{% endif %}

{% if item.newrelic is defined %}
  <IfModule php5_module>
    php_value newrelic.appname "{{ item.server_name }}"
  </IfModule>
{% endif %}

  <IfModule remoteip_module>
    RemoteIPHeader X-Forwarded-For
    RemoteIPInternalProxy 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16 169.254.0.0/16 127.0.0.0/8
  </IfModule>

  LogLevel info
  ErrorLog /var/log/apache2/{{ item.server_name }}-error.log
{% if item.elb == true %}
  LogFormat "\"%a\" %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\" %D" combined-elb
  CustomLog /var/log/apache2/{{ item.server_name }}-access.log combined-elb
{% else %}
  CustomLog /var/log/apache2/{{ item.server_name }}-access.log combined
{% endif %}

{% if item.filesmatch == true %}
  <FilesMatch "\.(ttf|otf|eot|woff)$">
    <IfModule mod_headers.c>
      Header set Access-Control-Allow-Origin "*"
    </IfModule>
  </FilesMatch>
{% endif %}

  <IfModule rewrite_module>
    RewriteEngine On
{% if item.force_https is defined and item.force_https == true %}
   RewriteCond %{HTTP:X-Forwarded-Proto} !https
   RewriteCond %{REMOTE_ADDR} !127.0.0.1
   RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=308]
{% endif %}
{% if item.rewrite is defined %}
{%   for rule in item.rewrite %}
    RewriteRule {{ rule.path }} {{ rule.rule }}
{%   endfor %}
{% endif %}
  </IfModule>

{% if item.fcgi == true %}
  <IfModule proxy_fcgi_module>
    <Proxy *>
      AddDefaultCharset off
      Require all granted
    </Proxy>
    ProxyPassMatch ^/(.*\.php(/.*)?)$ fcgi://127.0.0.1:9000{{ item.document_root }}{% if item.folder is defined %}/{{ item.folder }}{% endif %}/$1
  </IfModule>

# If php-fpm goes down, we might generate a 403 message - so lets make sure that this isn't cacheable
Header always set Cache-Control no-cache "expr=%{REQUEST_STATUS} == '403'"

{% elif item.origin is defined and item.origin == true %}

# Serve files that already exist to anyone
RewriteCond {{ item.document_root }}/%{REQUEST_URI} "-f"
RewriteRule "\.(png|jpg|jpeg|gif|svg|pdf|css|js)" - [L]

# If CloudFront asks for a file that does not yet exist AND supplies an itok query string, bootstrap Drupal to see if it can generate the file
RewriteCond  "%{HTTP_USER_AGENT}"  "CloudFront"
RewriteCond {{ item.document_root }}/%{REQUEST_URI} "!-f"
RewriteCond "%{QUERY_STRING}" "itok"
RewriteRule "\.(png|jpg|jpeg|gif|svg|pdf|css|js)" fcgi://127.0.0.1:9000{{ item.document_root }}{% if item.folder is defined %}/{{ item.folder }}{% endif %}/index.php [P,L]

# Otherwise, return 403 FORBIDDEN
RewriteRule .* - [F,L]

# We should cache only successful requests from CloudFront - anything else might be a transient error
# Also, don't let CloudFront see:
# - 'Link:' headers, which Drupal can generate alongside some error pages, or
# - "Expires:" headers, which Drupal sets to the distant past on any 403 pages it generates internally
<If "%{HTTP_USER_AGENT} =~ /CloudFront/">
  Header always set Cache-Control no-cache "expr=%{REQUEST_STATUS} != '200'"
  Header always unset Expires "expr=%{REQUEST_STATUS} != '200'"
  Header always unset Link
</If>
{% else %}
# Don't cache 404s for real files that don't (yet) exist - the 'always' keyword is needed to match non-success responses
Header always set Cache-Control no-cache "expr=%{REQUEST_STATUS} == 404"
{% endif %}

# Set some basic security headers if they don't already exist
Header always setifempty X-Frame-Options SAMEORIGIN
Header always setifempty Referrer-Policy "strict-origin-when-cross-origin"
Header always setifempty Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval'; upgrade-insecure-requests"
Header always setifempty X-Xss-Protection "1; mode=block"
Header always setifempty X-Content-Type-Options "nosniff"

# Remove headers that might help potential attackers
Header always unset Server
Header always unset X-Generator
Header always unset X-Powered-By

# Force traffic from bots to go to the canonical url - but make sure that Varnish doesn't cache this for other users
RewriteCond "%{HTTP_HOST}" !^{{ item.server_name }}$ [NC]
RewriteCond "%{HTTP_USER_AGENT}" "aolbuild" [NC,OR]                                       # AOL
RewriteCond "%{HTTP_USER_AGENT}" "baidu" [NC,OR]                                          # Baidu
RewriteCond "%{HTTP_USER_AGENT}" "(bingbot|bingpreview|msn)" [NC,OR]                      # Bing
RewriteCond "%{HTTP_USER_AGENT}" "duckduckgo" [NC,OR]                                     # DDG
RewriteCond "%{HTTP_USER_AGENT}" "(googlebot|adsbot-google|mediapartners-google)" [NC,OR] # Google
RewriteCond "%{HTTP_USER_AGENT}" "teoma" [NC,OR]                                          # Teoma (AskJeeves)
RewriteCond "%{HTTP_USER_AGENT}" "twitterbot" [NC,OR]                                     # Twitter
RewriteCond "%{HTTP_USER_AGENT}" "(slurp|mmcrawler)" [NC,OR]                              # Yahoo!
RewriteCond "%{HTTP_USER_AGENT}" "yandex" [NC]                                            # Yandex
RewriteRule ^(.*)$ https://{{ item.server_name }}$1 [L,R=301,E=nocache:1]
Header Always set Cache-Control "no-store, no-cache, must-revalidate" env=nocache

# Server status
{% if item.server_status is defined %}
<Location /cr-srs>
SetHandler server-status
Order allow,deny
Deny from all
Allow from {{item.server_name}} {% for alias in item.aliases %}{{ alias }} {% endfor -%}
</Location>
{% endif %}
</VirtualHost>
